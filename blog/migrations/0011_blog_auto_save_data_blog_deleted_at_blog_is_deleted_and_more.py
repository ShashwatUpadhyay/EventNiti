# Generated by Django 5.1.5 on 2025-09-01 19:48

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('blog', '0010_blogcategory_blogtag_blogview_alter_blog_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='blog',
            name='auto_save_data',
            field=models.JSONField(blank=True, default=dict, help_text='Auto-saved draft data'),
        ),
        migrations.AddField(
            model_name='blog',
            name='deleted_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='blog',
            name='is_deleted',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='blog',
            name='last_auto_save',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='blog',
            name='og_description',
            field=models.CharField(blank=True, help_text='Open Graph description', max_length=160),
        ),
        migrations.AddField(
            model_name='blog',
            name='og_image',
            field=models.ImageField(blank=True, help_text='Social media image', upload_to='blog_og/'),
        ),
        migrations.AddField(
            model_name='blog',
            name='og_title',
            field=models.CharField(blank=True, help_text='Open Graph title', max_length=60),
        ),
        migrations.AddField(
            model_name='blog',
            name='share_count',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='blog',
            name='status',
            field=models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived'), ('deleted', 'Deleted')], default='draft', max_length=10),
        ),
        migrations.CreateModel(
            name='BlogShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('facebook', 'Facebook'), ('twitter', 'Twitter'), ('linkedin', 'LinkedIn'), ('whatsapp', 'WhatsApp'), ('email', 'Email'), ('copy_link', 'Copy Link')], max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='blog.blog')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NewsletterSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_subscribed', models.BooleanField(default=True)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='weekly', max_length=20)),
                ('last_sent', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('categories', models.ManyToManyField(blank=True, to='blog.blogcategory')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='newsletter_subscription', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('new_blog', 'New Blog Post'), ('comment', 'New Comment'), ('like', 'Blog Liked'), ('challenge', 'Writing Challenge'), ('newsletter', 'Newsletter')], max_length=20)),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('sent_via_push', models.BooleanField(default=False)),
                ('sent_via_email', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('blog', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.blog')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WritingChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=200, unique=True)),
                ('description', models.TextField()),
                ('theme', models.CharField(help_text='Challenge theme or topic', max_length=100)),
                ('rules', models.TextField(help_text='Challenge rules and guidelines')),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('judging_end_date', models.DateTimeField()),
                ('min_words', models.PositiveIntegerField(default=500)),
                ('max_words', models.PositiveIntegerField(default=2000)),
                ('prizes', models.JSONField(default=list, help_text='List of prizes for winners')),
                ('winner_badges', models.JSONField(default=list, help_text='Badges to award winners')),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('active', 'Active'), ('judging', 'Judging'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='upcoming', max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allowed_categories', models.ManyToManyField(blank=True, to='blog.blogcategory')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BlogAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('views', models.PositiveIntegerField(default=0)),
                ('unique_views', models.PositiveIntegerField(default=0)),
                ('likes', models.PositiveIntegerField(default=0)),
                ('comments', models.PositiveIntegerField(default=0)),
                ('shares', models.PositiveIntegerField(default=0)),
                ('avg_read_time', models.FloatField(default=0.0, help_text='Average time spent reading in seconds')),
                ('bounce_rate', models.FloatField(default=0.0, help_text='Percentage of users who left immediately')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='blog.blog')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('blog', 'date')},
            },
        ),
        migrations.CreateModel(
            name='CommentReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction', models.CharField(choices=[('like', 'Like'), ('dislike', 'Dislike')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='blog.blogcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('comment', 'user')},
            },
        ),
        migrations.CreateModel(
            name='PushNotificationSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.URLField()),
                ('p256dh_key', models.CharField(max_length=255)),
                ('auth_key', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='push_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'endpoint')},
            },
        ),
        migrations.CreateModel(
            name='ChallengeSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('winner', 'Winner'), ('runner_up', 'Runner Up'), ('disqualified', 'Disqualified')], default='submitted', max_length=20)),
                ('judge_score', models.FloatField(blank=True, help_text='Score out of 100', null=True)),
                ('judge_feedback', models.TextField(blank=True)),
                ('public_votes', models.PositiveIntegerField(default=0)),
                ('position', models.PositiveIntegerField(blank=True, help_text='Final ranking position', null=True)),
                ('badges_earned', models.JSONField(default=list)),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_submissions', to='blog.blog')),
                ('participant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_submissions', to=settings.AUTH_USER_MODEL)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='blog.writingchallenge')),
            ],
            options={
                'ordering': ['-submitted_at'],
                'unique_together': {('challenge', 'participant')},
            },
        ),
    ]
